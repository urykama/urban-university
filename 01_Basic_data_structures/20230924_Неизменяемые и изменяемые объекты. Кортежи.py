# Практическое задание по теме: "Неизменяемые и изменяемые объекты. Кортежи"
#
# Цель:
# Написать программу на языке Python, используя iPython, для работы с неизменяемыми и изменяемыми объектами, в том числе с кортежами.
#
# 1. Запустите iPython:
#   - Откройте командную строку (терминал).
#   - Введите команду ipython или python для запуска iPython.
#
# 2. Задайте переменные разных типов данных:
#   - Создайте переменную immutable_var и присвойте ей кортеж из нескольких элементов разных типов данных.
immutable_var = (1, 2, 'a', 'b')
#   - Выполните операции вывода кортежа immutable_var на экран.
# print(type(immutable_var))
print('Immutable tuple:', immutable_var)
#
# 3. Изменение значений переменных:
#   - Попытайтесь изменить элементы кортежа immutable_var. Объясните, почему нельзя изменить значения элементов кортежа.
try:
    immutable_var.append('Modified')
except:
    print("ОШИБКА!", "AttributeError: 'tuple' object has no attribute 'append'")
try:
    immutable_var[0] = 'Modified'
except:
    print("ОШИБКА!", "TypeError: 'tuple' object does not support item assignment")
#
# 4. Создание изменяемых структур данных:
#   - Создайте переменную mutable_list и присвойте ей список из нескольких элементов.
mutable_list = [1, 2, 'a', 'b']
#   - Измените элементы списка mutable_list.
mutable_list.append('Modified')
#   - Выведите на экран измененный список mutable_list.
print('Mutable list:', mutable_list)
#
# Примечания:
# - Для вывода значений на экран используйте функцию print().
# - Обратите внимание на особенности изменяемых и неизменяемых объектов в Python.
#
# Пример результата выполнения программы:
# Immutable tuple: (1, 2, 'a', 'b')
# Mutable list: [1, 2, 'a', 'b', 'Modified']

'''
Кортеж (tuple) - это неизменяемый тип данных в Python, что означает, что значения элементов кортежа не могут быть изменены после создания кортежа. Это отличает кортеж от списка (list), который является изменяемым типом данных.

Есть несколько основных причин, почему кортежи не могут быть изменены:

Эффективность: кортежи реализованы таким образом, что они занимают меньше памяти, чем списки. Они хранятся в непрерывной области памяти, что позволяет быстро получать доступ к их элементам. Если бы кортежи могли быть изменены, это потребовало бы дополнительных ресурсов и привело бы к потере эффективности.

Безопасность и надежность: кортежи могут быть использованы в качестве ключей словаря, элементы множества или элементы других кортежей. Если бы кортежи могли быть изменены, это могло бы нарушить структуру этих структур данных и привести к потенциально непредсказуемому поведению программы.

Контроль и предсказуемость: исключая возможность изменения, кортежи обеспечивают предсказуемость в программе. Если значение кортежа изменяемо, это может привести к ошибкам, которые могут быть сложными для отладки и исправления.

Отладка: непрозрачность данных сводит к минимуму возможность ошибки программиста при работе с кортежами, поскольку он не может случайно изменить значения элементов кортежа.

В целом, использование неизменяемых объектов, таких как кортежи, помогает создавать более надежный и предсказуемый код.
'''