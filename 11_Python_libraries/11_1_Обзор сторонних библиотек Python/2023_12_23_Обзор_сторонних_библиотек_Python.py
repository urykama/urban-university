"""
2023/12/23 00:00|Домашнее задание по теме "Обзор сторонних библиотек Python"
Задание: Обзор сторонних библиотек Python

Цель:
Познакомиться с использованием сторонних библиотек в Python и применить их в различных задачах.

Инструкции:
1. Выберите одну или несколько сторонних библиотек Python, например:
    requests, pandas, numpy, matplotlib, pillow и другие.
2. Изучите документацию выбранных библиотек, ознакомьтесь с их основными возможностями и функциями.
3. Напишите простые задачи, в которых нужно использовать выбранные библиотеки, и выполните их. 
    Приведите примеры использования библиотек в различных сценариях:
  - Запросить данные с помощью библиотеки requests из API и вывести их в консоль.
  - Считать данные из файла с помощью библиотеки pandas, выполнить простой анализ данных и вывести результаты.
  - Создать массив чисел с помощью библиотеки numpy, выполнить математические операции с массивом и вывести результаты.
  - Визуализировать данные с помощью библиотеки matplotlib.
  - Обработать изображение с помощью библиотеки pillow, например, изменить его размер, 
    применить эффекты и сохранить в другой формат.
4. Поясните, как выбранные библиотеки помогли в решении поставленных задач и какие преимущества они предоставили 
    по сравнению с базовым функционалом Python.

Рекомендации:
- Используйте документацию и примеры кода из официальных ресурсов выбранных библиотек.
- Экспериментируйте с разными параметрами и функциями в выбранных библиотеках, чтобы лучше понять их возможности.
- Делайте выводы о преимуществах и удобстве использования сторонних библиотек в различных задачах.

Оценка:
Оценивайте выполнение задания по следующим критериям:
- Верное использование выбранных сторонних библиотек Python.
- Корректная работа и отображение результатов в соответствии с задачами.
- Качество и полнота выполнения задания.
"""

import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import time
from PIL import Image, ImageFilter
from io import BytesIO


def request_data():
    """Запросить данные с помощью библиотеки requests из API и вывести их в консоль."""
    start_time = int(time.time() * 1000)
    res = requests.request(method='GET',
                           url='https://fapi.binance.com/fapi/v1/time')
    servTime = res.json()
    shift_seconds = (servTime['serverTime'] - int(time.time() * 1000))
    print(f"Время на устройстве: {time.ctime()}")
    print(f"Время на устройстве: {time.time()} секунд")
    print(f"Время сети:          {(servTime['serverTime']/ 1000)} секунд")
    print(f"Задержка сети: {(servTime['serverTime'] - start_time) / 1000} секунд")
    print(f'Задержка сети: {shift_seconds / 1000} секунд')


def pandas_analysis():
    """Считать данные из файла с помощью библиотеки pandas, выполнить простой анализ данных и вывести результаты."""
    # Чтение данных из CSV файла
    sales = pd.read_csv("sales.csv")

    # Вывод первых нескольких строк данных
    print(sales.head())

    # Выполнение простого анализа данных
    print(f'Датафрейм продаж включает {sales.shape[0]} строк и {sales.shape[1]} столбцов')
    # В Pandas также есть метод size, который возвращает общее количество ячеек
    # (т. е. количество строк, умноженное на количество столбцов).

    print(f'\nМетод dtypes возвращает тип данных каждого столбца.\n{sales.dtypes}')
    print(f'\nМожно использовать функцию isna вместе с sum, \n'
          f'чтобы увидеть количество пропущенных значений в каждом столбце.\n{sales.isna().sum()}')
    # Если изменить значение параметра axis функции sum на 1,
    # получим количество отсутствующих значений в каждой строке.
    # sales.isna().sum(axis=1)
    print(f'\nФункция describe оценивает столбцы с числовым типом данных (int или float) и возвращает \n'
          f'статистические данные, которые дают представление о распределении значений.\n{sales.describe().round(2)}')
    print(f'\nФункция value_counts позволяет проверить распределение категориальных столбцов.\n'
          f'Она возвращает различные значения в столбце вместе с количеством их вхождений.\n'
          f'{sales["product_group"].value_counts()}')
    # sales["product_group"].value_counts(normalize=True)
    print(f'\nМожно определить среднюю цену для каждой группы продуктов\n'
          f'{sales.groupby("product_group", as_index=False).agg(avg_price=("price", "mean"))}')


def create_array():
    """Создать массив чисел с помощью библиотеки numpy,
    выполнить математические операции с массивом и вывести результаты."""
    # Создание массива чисел от 1 до 10
    # array_2d = np.ones((8, 8))
    # array_2d = np.random.default_rng()
    array_2d = np.random.default_rng()
    rnd_array_2d = array_2d.integers(low=0, high=10, size=(8, 8))

    # Вывод массива
    print(rnd_array_2d)
    print('Общий размер массива в байтах:', rnd_array_2d.nbytes)

    # Выполнение математических операций
    print('Сумма элементов:', np.sum(rnd_array_2d))
    print('Среднее значение:', np.mean(rnd_array_2d))


def matplotlib_visualize():
    """Визуализировать данные с помощью библиотеки matplotlib."""
    # Создание данных
    x = np.linspace(0, 10, 50)
    y = np.sin(x)

    # Построение графика
    plt.plot(x, y)
    plt.xlabel('Время')
    plt.ylabel('Значение')
    plt.title('Синусоидальная волна')
    plt.grid(True)
    # for i in range(8):
    #     # y = np.tan(x + 3.14/4)
    #     y = np.tan(x)
    #     plt.plot(x, y)
    plt.show()


def pillow_processing():
    # Открытие изображения
    # img = Image.open('image.jpeg')
    img = Image.open('img.jpg')

    # Изменение размера изображения
    resized_img = img.resize((300, 200))

    # Применение эффекта
    blurred_img = img.filter(ImageFilter.BLUR)

    # Сохранение изображения в другом формате
    resized_img.save('resized_image.jpg')
    blurred_img.save('blurred_image.jpg')


if __name__ == '__main__':
    request_data()
    pandas_analysis()
    create_array()
    matplotlib_visualize()
    pillow_processing()
"""
    Эти примеры демонстрируют, как можно использовать
различные сторонние библиотеки в Python для решения 
различных задач.
    Каждая библиотека предоставляет мощные инструменты: 
для работы с данными, визуализации и обработки изображений,
что делает их полезными для широкого спектра задач.
"""
